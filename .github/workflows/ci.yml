name: CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format:check

      - name: Lint
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_simulator_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Detect environment and get postgres IP
        id: detect-env
        run: |
          # Default for GitHub Actions
          echo "db_host=localhost" >> $GITHUB_OUTPUT
          echo "test_host=localhost" >> $GITHUB_OUTPUT

          # Check if we're running in act
          if [ -z "$ACTIONS_RUNTIME_URL" ]; then
            echo "Running in act - finding Postgres container IP"
            
            # Get the container ID of the postgres container
            POSTGRES_CONTAINER_ID=$(docker ps --filter "ancestor=postgres:14" --format "{{.ID}}")
            
            if [ -n "$POSTGRES_CONTAINER_ID" ]; then
              echo "Found postgres container: $POSTGRES_CONTAINER_ID"
              
              # Get the IP address of the container
              POSTGRES_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $POSTGRES_CONTAINER_ID)
              
              if [ -n "$POSTGRES_IP" ]; then
                echo "Found postgres container IP: $POSTGRES_IP"
                echo "db_host=$POSTGRES_IP" >> $GITHUB_OUTPUT
              else
                echo "Could not get IP, falling back to 127.0.0.1"
                echo "db_host=127.0.0.1" >> $GITHUB_OUTPUT
              fi
            else
              echo "Could not find postgres container, falling back to 127.0.0.1"
              echo "db_host=127.0.0.1" >> $GITHUB_OUTPUT
            fi
            
            # For act, we need to use 0.0.0.0 to listen on all interfaces
            echo "test_host=0.0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Create .env.test file
        run: |
          DB_HOST_VALUE="${{ steps.detect-env.outputs.db_host }}"
          echo "Using DB_HOST=$DB_HOST_VALUE"

          cat > .env.test << EOF
          # Test Database Configuration
          DB_HOST=$DB_HOST_VALUE
          DB_PORT=5432
          DB_USERNAME=postgres
          DB_PASSWORD=postgres
          DB_NAME=trading_simulator_test

          # Test Server Configuration
          TEST_PORT=3001
          TEST_HOST=${{ steps.detect-env.outputs.test_host }}
          NODE_ENV=test
          PORT=3001

          # Test Security Secrets
          ROOT_ENCRYPTION_KEY=test_root_encryption_key

          # EVM Chain Configuration
          EVM_CHAINS=eth,polygon,bsc,arbitrum,base,optimism,avalanche,linea

          # Test Environment Options
          START_SERVER_MODE=spawn
          USE_APP_INIT_SCRIPT=false
          E2E_CLEANUP_DB=true
          DB_CLEANUP_STRATEGY=truncate

          # Test Admin Credentials
          TEST_ADMIN_USERNAME=admin
          TEST_ADMIN_PASSWORD=test-password-123
          TEST_ADMIN_EMAIL=admin@test.com

          # Test Team Credentials
          TEST_TEAM_NAME=Test Team Alpha
          TEST_TEAM_EMAIL=team@test.com
          TEST_TEAM_CONTACT=John Doe

          # Test Solana Token Address
          TEST_SOL_TOKEN_ADDRESS=4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R

          # Initial token balances for testing
          INITIAL_SVM_SOL_BALANCE=10
          INITIAL_SVM_USDC_BALANCE=5000
          INITIAL_SVM_USDT_BALANCE=1000

          # Ethereum (EVM) balances
          INITIAL_ETH_ETH_BALANCE=1
          INITIAL_ETH_USDC_BALANCE=5000
          INITIAL_ETH_USDT_BALANCE=0

          # Max Trade Percentage
          MAX_TRADE_PERCENTAGE=10

          # Base-specific balances
          INITIAL_BASE_USDC_BALANCE=5000

          # Portfolio configuration
          PORTFOLIO_SNAPSHOT_INTERVAL_MS=10000
          PORTFOLIO_PRICE_FRESHNESS_MS=10000

          # Cross-chain trading configuration
          ALLOW_CROSS_CHAIN_TRADING=false

          # Optional: Disable ability for participants to view leaderboard activity
          DISABLE_PARTICIPANT_LEADERBOARD_ACCESS=false
          EOF

      - name: Run E2E tests
        run: |
          # Run the tests and capture the output
          npm run test:e2e -- --detectOpenHandles --forceExit
        env:
          TEST_MODE: true
          DB_HOST: ${{ steps.detect-env.outputs.db_host }}
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_NAME: trading_simulator_test
          TEST_HOST: ${{ steps.detect-env.outputs.test_host }}
          JEST_WORKER_ID: 1 # Force single worker to prevent open handles from child processes
          DB_CONNECTION_TIMEOUT: 5000
          DB_IDLE_TIMEOUT: 1000
